public void waitForLoaderSpinnerToDisappear() {
		int counter = 1;
		By spinnerLoaderLocator = By.xpath("//*[local-name()='svg'][@aria-label='audio-loading']");
		this.waitFor(3);
		while (this.isElementVisibilityLocated(spinnerLoaderLocator)) {
			counter++;
			System.out.println("Counter--> " + counter);
			if (this.checkElementInVisibile(spinnerLoaderLocator)) {
				DriverFactory.getObjAssertLogUtils().logReporter("Verify Processing... is disappeared", true);
				break;
			} else {
				DriverFactory.getObjAssertLogUtils().logReporter("Verify Processing... is appeared",
						"waiting for 3 sec", true);
				this.waitFor(3);
				if (counter > 3)
					break;
			}
		}
		DriverFactory.getObjAssertLogUtils().logReporter("Verify Spinner Processing... is disappeared", true);
	}

public String getRandomStringWithNumbers(int lenght) {
		String allowedChars = "abcdefghiklABCDEFGHIJKLMNOmnopqrstuvwxyz1234567890";
		String randomstring = "";
		for (int i = 0; i < lenght; i++) {
			int rnum = (int) Math.floor(Math.random() * allowedChars.length());
			randomstring += allowedChars.substring(rnum, rnum + 1);
		}
		return randomstring;
	}

/**
	 * Below method is used for only switching iFrames single or Nested. For
	 * this method no need to switch frame you just pass locator which you want
	 * and perform action event, It will switch iframe automatically and perform
	 * locator action event.
	 * 
	 * @param locator
	 *            Created By : Framework Developer
	 * 
	 */
	public boolean switchToIframeSingleWithNestedUsingIframeByIndex(By locator) {

		try {

			int intParentFrame;
			int intChildFrame;
			int intLocatorCount = 0;
			int intFrameCount = -1;
			int intCount = 0;
			DriverFactory.getDriver().switchTo().defaultContent();
			int intParentIframeCount = DriverFactory.getDriver().findElements(By.tagName("iframe")).size();
			System.out.println("**************** into Parent Iframe Count ---> " + intParentIframeCount);

			for (intParentFrame = 0; intParentFrame < intParentIframeCount; intParentFrame++){
				DriverFactory.getDriver().switchTo().defaultContent();
				DriverFactory.getDriver().switchTo().frame(intParentFrame);
				System.out
						.println(" **************** into Parent Iframe Count continue looping --->  " + intParentFrame);
				intLocatorCount = DriverFactory.getDriver().findElements(locator).size();
				System.out.println("**************** into Parent iframe Locator size found ---> " + intLocatorCount);

				while (!(intLocatorCount > 0)) {

					intCount++;
					int intChildIframeCount = DriverFactory.getDriver().findElements(By.tagName("iframe")).size();
					System.out.println("**************** into Child Iframe Count ---> " + intChildIframeCount);

					System.out.println(
							"**************** into Child Iframe Count continue looping --->  " + intChildIframeCount);

					for (intChildFrame = 0; intChildFrame < intChildIframeCount; intChildFrame++) {
						checkChildIframe(intChildFrame);

						intLocatorCount = checkIframeElement(locator);
						System.out.println(
								" **************** into Parent iframe Locator size found ---> " + intLocatorCount);

						if (intLocatorCount > 0) {
							System.out.println(" Locator found successfully and  Break child loop..!!!!!!!");
							break;
						}
					}
					if (intCount > 0) {
						break;
					}
				}
				if (intLocatorCount > 0)

				{
					intFrameCount = intParentFrame;
					System.out.println("**************** Final locator found frame count  ----> " + intFrameCount);
					System.out.println(" **************** Locator found successfully and  Break parent loop..!!!!!!!");
					break;
				}
			}
			return true;

		} catch (NoSuchFrameException exFrameException) {
			logger.error("I got Exception: ", exFrameException);
			return false;
		} catch (NoSuchElementException exception) {
			logger.error("I got Exception: ", exception);
			return false;
		} catch (Exception exception) {
			logger.error("I got Exception: ", exception);
			return false;

		}

	}


public boolean checkChildIframe(int intChildFrame) {
		try {
			System.out.println(" intChildFrame before try");
			DriverFactory.getDriver().switchTo().frame(intChildFrame);
			System.out.println(" intChildFrame " + intChildFrame);
			return true;
		} catch (Exception e) {
			System.out.println(" intChildFrame catch");
			logger.error("I got Exception: ", e);
			return false;
		}
	}


public int checkIframeElement(By locator) {
		try {
			System.out.println(" intLocatorCount before ");
			int intLocatorCount = DriverFactory.getDriver().findElements(locator).size();
			System.out.println(" intLocatorCount " + intLocatorCount);
			return intLocatorCount;
		} catch (Exception e) {
			System.out.println(" intLocatorCount " + 0);
			logger.error("I got Exception: ", e);
			return 0;
		}
	}


/**
	 * @Method : verifyTableContent
	 * @Description : it will check given data in whole table
	 * @param :
	 *            locator - By identification of element (table with all rows)
	 * @param :
	 *            columnHeader - String column header
	 * @param :
	 *            ContentToVerify - String Content to be verify
	 * @author : Automation Tester
	 */
	public boolean verifyTableContent(By locator, String columnHeader, String ContentToVerify) {
		Hashtable<String, String> dataColumnHeader = new Hashtable<String, String>();
		int intColumnNumber = 1;
		boolean blnverify = false;
		try {
			waitForElementPresence(locator);
			WebElement weResultTable = objPojo.getDriver().findElement(locator);

			waitForPresenceOfNestedElementsLocated(locator, By.xpath(".//thead/tr/th"));
			List<WebElement> weColumnsHeaders = weResultTable.findElements(By.xpath(".//thead/tr/th"));
			for (WebElement weColumnHeader : weColumnsHeaders) {
				String strHeader = weColumnHeader.getText().trim();
				// System.out.println("strHeader------->" + strHeader);
				if (!strHeader.equals(""))
					dataColumnHeader.put(strHeader, String.valueOf(intColumnNumber));
				intColumnNumber++;
			}

			waitForPresenceOfNestedElementsLocated(locator, By.xpath(".//tbody/tr"));
			List<WebElement> weRows = weResultTable.findElements(By.xpath(".//tbody/tr"));
			for (WebElement weRow : weRows) {
				WebElement weExceptedClm = weRow
						.findElement(By.xpath(".//td[" + dataColumnHeader.get(columnHeader) + "]"));
				// System.out.println("************************---------->" +
				// weExceptedClm.getText());
				if (weExceptedClm.getText().trim().equals(ContentToVerify)) {
					blnverify = true;
					return blnverify;
				}
			}
			return blnverify;
		} catch (NoSuchElementException exception) {
			objPojo.setCustomException("Timeout & NoSuchElement Exception");
			System.out.println("I got no such " + exception.getMessage());
			exception.printStackTrace();
			return false;
		} catch (TimeoutException exception) {
			objPojo.setCustomException("Timeout & NoSuchElement Exception");
			System.out.println("I got timeout " + exception.getMessage());
			exception.printStackTrace();
			return false;
		} catch (NotFoundException exception) {
			objPojo.setCustomException("NotFound Exception");
			System.out.println("I got timeout " + exception.getMessage());
			exception.printStackTrace();
			return false;
		} catch (ElementNotVisibleException exception) {
			objPojo.setCustomException("ElementNotVisibleException");
			System.out.println("I got timeout " + exception.getMessage());
			exception.printStackTrace();
			return false;
		} catch (ElementNotInteractableException exception) {
			objPojo.setCustomException("ElementNotInteractableException Exception");
			System.out.println("I got timeout " + exception.getMessage());
			exception.printStackTrace();
			return false;
		} catch (ElementNotSelectableException exception) {
			objPojo.setCustomException("ElementNotSelectableException Exception");
			System.out.println("I got timeout " + exception.getMessage());
			exception.printStackTrace();
			return false;
		} catch (Exception exception) {
			objPojo.setCustomException("NoSuchElement Exception");
			exception.printStackTrace();
			return false;
		}
	}



/**
	 * @Description : This is wrapper method wait for element presence located
	 * @param : locator - By identification of element
	 */
	public void waitForPresenceOfNestedElementLocated(WebElement webElement, By sub_locator) throws NotFoundException {
		DriverFactory.getWebDriverWait()
				.until(ExpectedConditions.presenceOfNestedElementLocatedBy(webElement, sub_locator));
	}

	/**
	 * @Description : This is wrapper method wait for element presence located
	 * @param : locator - By identification of element
	 */
	public void waitForPresenceOfNestedElementsLocated(By locator, By sub_locator) throws NotFoundException {
		DriverFactory.getWebDriverWait()
				.until(ExpectedConditions.presenceOfNestedElementsLocatedBy(locator, sub_locator));
	}












